{"version":3,"sources":["components/create/icons/Record.svg","components/create/icons/Upload.svg","components/create/icons/OrIcon.svg","serviceWorker.ts","components/common/navigation/reducers/NavigationReducer.ts","components/common/navigation/actions/NavigationActionTypes.ts","store/root-reducer.ts","store/index.tsx","components/common/navigation/component/Navigation.tsx","components/oauth/component/OAuth2Page.tsx","components/common/navigation/actions/NavigationActions.ts","components/create/component/CreatePage.tsx","App.tsx","index.tsx"],"names":["module","exports","Boolean","window","location","hostname","match","initialState","user","undefined","NavigationReducer","state","action","type","payload","rootReducer","combineReducers","navigationState","composeEnhancers","compose","rootStore","createStore","Navigation","createClassName","listenClassName","pathname","loginText","useSelector","console","log","useState","loginUrl","setLoginURL","useEffect","fetch","then","response","text","data","Container","fluid","Row","className","Col","lg","offset","span","xs","href","props","history","useHistory","dispatch","useDispatch","authorizationCode","qs","search","push","CreatePage","src","Record","alt","OrIcon","Upload","App","store","exact","path","component","compoent","OAuth2Page","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.49a751d1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Record.b4f7b1b4.svg\";","module.exports = __webpack_public_path__ + \"static/media/Upload.3efc39b5.svg\";","module.exports = __webpack_public_path__ + \"static/media/OrIcon.90445495.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import NavigationStateInterface from \"./NavigationStateInterface\";\nimport {DELETE_USER, UPDATE_LOCATION, UPDATE_USER} from \"../actions/NavigationActionTypes\";\n\nconst initialState: NavigationStateInterface = {location: \"create\", user: undefined}\nexport default function NavigationReducer(\n    state: NavigationStateInterface = initialState,\n    action: any) {\n\n    switch(action.type) {\n        case UPDATE_LOCATION:\n            //todo\n            return state;\n        case UPDATE_USER:\n            return {...state, user: action.payload};\n        case DELETE_USER:\n            return {...state, user: undefined};\n        default:\n            return {...state};\n    }\n}","export const UPDATE_LOCATION = \"UPDATE_LOCATION\";\nexport const UPDATE_USER = \"UPDATE_USER\";\nexport const DELETE_USER = \"DELETE_USER\";\n\ninterface UpdateLocationType {\n    type: typeof UPDATE_LOCATION\n}\n\ninterface UpdateUserType {\n    type: typeof UPDATE_USER\n    payload: string\n}\n\ninterface DeleteUserType {\n    type: typeof DELETE_USER\n}\n\nexport type NavigationActionTypes = (\n    UpdateLocationType |\n    UpdateUserType |\n    DeleteUserType\n)","import { combineReducers } from 'redux';\nimport NavigationReducer from \"../components/common/navigation/reducers/NavigationReducer\";\n\nconst rootReducer = () => combineReducers({\n    navigationState: NavigationReducer\n});\n\nexport default rootReducer;","import { createStore, compose } from \"redux\"\nimport rootReducer from \"./root-reducer\";\n\n// @ts-ignore\nconst composeEnhancers = window['__REDUX_DEVTOOLS_EXTENSION_COMPOSE__'] as typeof compose || compose;\nconst initialState = {}\nconst rootStore = createStore(rootReducer(), initialState, composeEnhancers());\n\nexport default rootStore;","import React, {useEffect, useState} from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nimport './Navigation.css';\nimport RootState from \"../../../../store/root-state\";\nimport {useSelector} from \"react-redux\";\n\n\nexport default function Navigation() {\n\n    const pathname = window.location.pathname;\n    let createClassName = \"\";\n    let listenClassName = \"\";\n    if (pathname === \"/\") createClassName=\"selected\";\n    else listenClassName =\"selected\";\n\n    let loginText = useSelector((state: RootState) => state.navigationState.user);\n    if (loginText === undefined) loginText = \"Login\";\n    console.log(loginText)\n    const [loginUrl, setLoginURL] = useState(\"\");\n    useEffect(() => {\n        fetch(\"/login/url\")\n            .then(response => response.text())\n            .then(data => setLoginURL(data));\n    }, [loginUrl])\n\n    return (\n        <Container fluid>\n            <Row className=\"topbarRow\">\n                <Col lg={{offset: 2, span: 1}}>\n                    <div className=\"logo\">\n                        Tabber\n                    </div>\n                </Col>\n                <Col xs={{offset: 7}}>\n                    <a className=\"accountInfo\" href={loginUrl}>\n                        {loginText}\n                    </a>\n                </Col>\n            </Row>\n            <br />\n            <Row className=\"toolSelection\">\n                <Col lg={{offset: 2, span: 1}}>\n                    <div className={createClassName}>\n                        Create\n                    </div>\n                </Col>\n                <Col lg={{span: 1}}>\n                    <div className={listenClassName}>\n                        Listen\n                    </div>\n                </Col>\n            </Row>\n        </Container>\n    );\n}","import React, {useEffect} from 'react';\nimport {useHistory} from \"react-router\";\nimport * as qs from 'query-string';\nimport {useDispatch} from \"react-redux\";\nimport {UpdateUser} from \"../../common/navigation/actions/NavigationActions\";\n\nexport default function(props: any) {\n\n    const history = useHistory();\n    const dispatch = useDispatch();\n\n    const authorizationCode = qs.parse(props.location.search)[\"code\"]\n    useEffect(() => {\n        fetch(\"/token?code=\"+authorizationCode)\n            .then(response => response.text())\n            .then(data => {\n                dispatch(UpdateUser(data));\n            })\n        history.push(\"/\")\n    })\n\n    return(\n        <div>authenticating....</div>\n    );\n}","import {DELETE_USER, NavigationActionTypes, UPDATE_LOCATION, UPDATE_USER} from \"./NavigationActionTypes\";\n\n\nexport function UpdateLocation(): NavigationActionTypes {\n    return {\n        type: UPDATE_LOCATION\n    }\n}\n\nexport function UpdateUser(user: string): NavigationActionTypes {\n    return {\n        type: UPDATE_USER,\n        payload: user\n    }\n}\n\nexport function DeleteUser(): NavigationActionTypes {\n    return {\n        type: DELETE_USER\n    }\n}","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\n\nimport Record from '../icons/Record.svg';\nimport Upload from '../icons/Upload.svg';\nimport OrIcon from \"../icons/OrIcon.svg\";\n\nimport './CreatePage.css';\n\nexport default function CreatePage() {\n\n    return(\n        <Container className=\"createPageBody\">\n            <Row>\n                <img src={Record} className='recordButton' alt='record button' />\n            </Row>\n            <br />\n            <Row>\n                <img src={OrIcon} className='OrIcon' alt='OR icon' />\n            </Row>\n            <br />\n            <Row>\n                <img src={Upload} className='uploadButton' alt='upload button' />\n            </Row>\n        </Container>\n    );\n}","import React from 'react';\nimport Container from \"react-bootstrap/Container\";\nimport {Provider} from \"react-redux\";\nimport {Route, Switch} from \"react-router\";\n\nimport './App.css';\nimport rootStore from \"./store\";\nimport Navigation from \"./components/common/navigation/component/Navigation\";\nimport OAuth2Page from \"./components/oauth/component/OAuth2Page\";\nimport CreatePage from \"./components/create/component/CreatePage\";\n\nfunction App() {\n  return (\n      <Provider store={rootStore}>\n        <Container fluid className=\"app\">\n          <Navigation />\n          <Switch>\n            <Route exact path=\"/\" component={CreatePage} />\n            <Route exact path=\"/create\" compoent={CreatePage} />\n            <Route exact path=\"/oauth\" component={OAuth2Page} />\n          </Switch>\n        </Container>\n      </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\nimport App from './App';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <Switch>\n                <Route component={App}/>\n            </Switch>\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}